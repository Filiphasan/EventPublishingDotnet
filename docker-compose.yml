version: '3.7'

networks:
  even-publishing:
    name: even-publishing
    driver: bridge

volumes:
  even-publishing-data:
    name: even-publishing-data
    driver: local

services:
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1 # Imagein adresi, özellikle bu sürümü kibana arayüzüne alışık olduğumdan tercih ediyorum
    environment:
      - "discovery.type=single-node"
      - "ELASTIC_PASSWORD=123456"
      - "xpack.security.enabled=true"
    ports:
      - "9200:9200"
    networks:
      - shared-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f -u elastic:123456 http://localhost:9200/ || exit 1" ]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 30s

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.16.1
    environment:
      - "ELASTICSEARCH_URL=http://elasticsearch:9200"
      - "ELASTICSEARCH_USERNAME=elastic"
      - "ELASTICSEARCH_PASSWORD=123456"
    ports:
      - "5601:5601"
    networks:
      - shared-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5601/ || exit 1" ]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 30s
  postgre-sql:
    image: postgres:latest
    container_name: postgre-sql
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: event_publishing
    volumes:
      - even-publishing-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  mongo-db:
    image: mongo:latest
    container_name: mongo-db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_user
      MONGO_INITDB_ROOT_PASSWORD: 123456
    ports:
      - "27017:27017"
    volumes:
      - even-publishing-data:/data/db
    healthcheck:
      test: [ "CMD-SHELL", "echo 'db.runCommand({ ping: 1 })' | mongo --username mongo_user --password 123456 --quiet" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  rabbit-mq:
    image: rabbitmq:management
    container_name: rabbit-mq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: 123456
    volumes:
      - even-publishing-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmqctl status" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  main-service:
    image: ${DOCKER_REGISTRY-}mainservice
    container_name: main-service
    build:
      context: .
      dockerfile: src/Presentation/MainService/Dockerfile
    ports:
      - "5001:8080"
    environment:
      - Mongo.Username=mongo_user
      - Mongo.Password=123456
      - Mongo.Host=mongo-db
      - Mongo.Port=27017
      - Mongo.DatabaseName=event_publishing
      - Postgres.Username=postgres
      - Postgres.Password=123456
      - Postgres.Host=postgre-sql
      - Postgres.Port=5432
      - Postgres.DatabaseName=event_publishing
      - RabbitMq.Username=admin
      - RabbitMq.Password=123456
      - RabbitMq.Host=rabbit-mq
      - RabbitMq.Port=5672
    depends_on:
      postgre-sql:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
      rabbit-mq:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5001" ]
      interval: 5s
      timeout: 30s
      retries: 3
      start_period: 10s

  order-service:
    image: ${DOCKER_REGISTRY-}orderservice
    container_name: order-service
    build:
      context: .
      dockerfile: src/Subscriber/OrderService/Dockerfile
    ports:
      - "5002:8080"
    environment:
      - Mongo.Username=mongo_user
      - Mongo.Password=123456
      - Mongo.Host=mongo-db
      - Mongo.Port=27017
      - Mongo.DatabaseName=event_publishing
      - Postgres.Username=postgres
      - Postgres.Password=123456
      - Postgres.Host=postgre-sql
      - Postgres.Port=5432
      - Postgres.DatabaseName=event_publishing
      - RabbitMq.Username=admin
      - RabbitMq.Password=123456
      - RabbitMq.Host=rabbit-mq
      - RabbitMq.Port=5672
    depends_on:
      postgre-sql:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
      rabbit-mq:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5002" ]
      interval: 5s
      timeout: 30s
      retries: 3
      start_period: 10s

  bg-worker:
    image: ${DOCKER_REGISTRY-}bgworker
    container_name: bg-worker
    build:
      context: .
      dockerfile: src/Subscriber/BgWorker/Dockerfile
    ports:
      - "5003:8080"
    environment:
      - Mongo.Username=mongo_user
      - Mongo.Password=123456
      - Mongo.Host=mongo-db
      - Mongo.Port=27017
      - Mongo.DatabaseName=event_publishing
      - Postgres.Username=postgres
      - Postgres.Password=123456
      - Postgres.Host=postgre-sql
      - Postgres.Port=5432
      - Postgres.DatabaseName=event_publishing
      - RabbitMq.Username=admin
      - RabbitMq.Password=123456
      - RabbitMq.Host=rabbit-mq
      - RabbitMq.Port=5672
    depends_on:
      postgre-sql:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
      rabbit-mq:
        condition: service_healthy
